Index: a/include/VBox/sup.h
===================================================================
--- a/include/VBox/sup.h	(revision 151556)
+++ a/include/VBox/sup.h	(working copy)
@@ -2142,6 +2142,26 @@
  */
 SUPR0DECL(uint32_t) SUPR0GetKernelFeatures(void);
 
+/**
+ * Notification from R0 VMM prior to loading the guest-FPU register state.
+ *
+ * @returns Whether the host-FPU register state has been saved by the host kernel.
+ * @param   fCtxHook    Whether thread-context hooks are enabled.
+ *
+ * @remarks Called with preemption disabled.
+ */
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook);
+
+/**
+ * Notification from R0 VMM prior to saving the guest-FPU register state (and
+ * potentially restoring the host-FPU register state) in ring-0.
+ *
+ * @param   fCtxHook    Whether thread-context hooks are enabled.
+ *
+ * @remarks Called with preemption disabled.
+ */
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook);
+
 /** @copydoc RTLogGetDefaultInstanceEx
  * @remarks To allow overriding RTLogGetDefaultInstanceEx locally. */
 SUPR0DECL(struct RTLOGGER *) SUPR0GetDefaultLogInstanceEx(uint32_t fFlagsAndGroup);
Index: a/src/VBox/Additions
===================================================================
--- a/src/VBox/Additions	(revision 151556)
+++ a/src/VBox/Additions	(working copy)

Property changes on: src/VBox/Additions
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,1 ##
   Merged /trunk/src/VBox/Additions:r150844
Index: a/src/VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp
===================================================================
--- a/src/VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp	(revision 151556)
+++ a/src/VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp	(working copy)
@@ -2002,6 +2002,18 @@
 }
 
 
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
 /*
  *
  * org_virtualbox_SupDrv
Index: a/src/VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c
===================================================================
--- a/src/VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c	(revision 151556)
+++ a/src/VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c	(working copy)
@@ -640,3 +640,16 @@
     return 0;
 }
 
+
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
Index: a/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c
===================================================================
--- a/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c	(revision 151556)
+++ a/src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c	(working copy)
@@ -1454,6 +1454,31 @@
 }
 
 
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+#if RTLNX_VER_MIN(5,18,0)
+    kernel_fpu_begin();
+    /* if (fCtxHook) */
+        preempt_enable();  /* HACK ALERT! undo the implicit preempt_disable() in kernel_fpu_begin(). */
+    return true;
+#else
+    return false;
+#endif
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+#if RTLNX_VER_MIN(5,18,0)
+    /* if (fCtxHook) */
+        preempt_disable();  /* HACK ALERT! undo the implicit preempt_enable() in SUPR0FpuBegin(). */
+    kernel_fpu_end();
+#endif
+}
+
+
 int VBOXCALL    supdrvOSGetCurrentGdtRw(RTHCUINTPTR *pGdtRw)
 {
 #if RTLNX_VER_MIN(4,12,0)
Index: a/src/VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp
===================================================================
--- a/src/VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp	(revision 151556)
+++ a/src/VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp	(working copy)
@@ -541,3 +541,16 @@
     return 0;
 }
 
+
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
Index: a/src/VBox/HostDrivers/Support/solaris/SUPDrv-solaris.c
===================================================================
--- a/src/VBox/HostDrivers/Support/solaris/SUPDrv-solaris.c	(revision 151556)
+++ a/src/VBox/HostDrivers/Support/solaris/SUPDrv-solaris.c	(working copy)
@@ -1309,3 +1309,16 @@
     return 0;
 }
 
+
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
Index: a/src/VBox/HostDrivers/Support/win/SUPDrv-win.cpp
===================================================================
--- a/src/VBox/HostDrivers/Support/win/SUPDrv-win.cpp	(revision 151556)
+++ a/src/VBox/HostDrivers/Support/win/SUPDrv-win.cpp	(working copy)
@@ -2704,6 +2704,19 @@
 }
 
 
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
+
 SUPR0DECL(int) SUPR0IoCtlSetupForHandle(PSUPDRVSESSION pSession, intptr_t hHandle, uint32_t fFlags, PSUPR0IOCTLCTX *ppCtx)
 {
     /*
Index: a/src/VBox/VMM/VMMR0/CPUMR0.cpp
===================================================================
--- a/src/VBox/VMM/VMMR0/CPUMR0.cpp	(revision 151556)
+++ a/src/VBox/VMM/VMMR0/CPUMR0.cpp	(working copy)
@@ -440,6 +440,9 @@
     Assert(!(pVCpu->cpum.s.fUseFlags & CPUM_USED_FPU_GUEST));
     Assert(!(pVCpu->cpum.s.fUseFlags & CPUM_SYNC_FPU_STATE));
 
+    /* Notify the support driver prior to loading the guest-FPU register state. */
+    SUPR0FpuBegin(false /* unused */);
+
     if (!pVM->cpum.s.HostFeatures.fLeakyFxSR)
     {
         Assert(!(pVCpu->cpum.s.fUseFlags & CPUM_USED_MANUAL_XMM_RESTORE));
@@ -484,6 +487,9 @@
     Assert(ASMGetCR4() & X86_CR4_OSFXSR);
     if (pVCpu->cpum.s.fUseFlags & (CPUM_USED_FPU_GUEST | CPUM_USED_FPU_HOST))
     {
+        /* Notify the support driver prior to loading the host-FPU register state. */
+        SUPR0FpuEnd(false /* unused */);
+
         fSavedGuest = RT_BOOL(pVCpu->cpum.s.fUseFlags & CPUM_USED_FPU_GUEST);
         if (!(pVCpu->cpum.s.fUseFlags & CPUM_USED_MANUAL_XMM_RESTORE))
             cpumR0SaveGuestRestoreHostFPUState(&pVCpu->cpum.s);
